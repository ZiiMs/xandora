import { type NextPage } from "next";
import Head from "next/head";
import Link from "next/link";
import { api } from "~/utils/api";
// import { env } from "~/env.mjs";
import {
    CardElement,
    Elements,
    useElements,
    useStripe,
} from "@stripe/react-stripe-js";
import { loadStripe } from "@stripe/stripe-js";

import Sidebar, { type Category } from "~/components/layout/sidebar";
import { env } from "~/env.mjs";
import { useState } from "react";
import productsData from "../data/products.json";
const stripePromise = loadStripe(env.NEXT_PUBLIC_STRIPE_PUBLISHABLE_KEY);

const Home: NextPage = () => {
    const [activeFilters, setActiveFilters] = useState<{
        [key in Category as string]: string[];
    }>({ COLOR: [], STYLE: [], SIZE: [] });
    const [products, setProducts] = useState(productsData);

    return (
        <>
            <Head>
                <title>Create T3 App</title>
                <meta name="description" content="Generated by create-t3-app" />
                <link rel="icon" href="/favicon.ico" />
            </Head>
            <div className="flex h-full w-full flex-row">
                <Sidebar
                    activeFilters={activeFilters}
                    setActiveFilters={(data) => {
                        const { tag } = data;
                        const category = data.category.toString();
                        const temp = activeFilters;

                        if (!temp[category] || !temp[category]?.includes(tag.id)) {
                            if (!temp[category]) {
                                temp[category] = [tag.id];
                            } else {
                                temp[category]?.push(tag.id);
                            }
                            console.log("Not Found adding", temp[category]);
                        } else if (temp[category] != undefined && temp[category] != null) {
                            temp[category]!.splice(temp[category]!.indexOf(tag.id), 1);
                            console.log("Found deleting", temp);
                        }

                        // setActiveFilters((currFilters) => ({
                        //     ...currFilters,
                        //     [category]: [],
                        // }));
                        // const temp = [...activeFilters];
                        // if (!temp. {
                        //     temp.push(tag.id);
                        // } else {
                        //     temp.splice(temp.indexOf(tag.id), 1);
                        //     console.log("Found deleting", temp);
                        // }
                        setActiveFilters(() => ({
                            ...temp,
                        }));
                        console.log("ActiveFilters", activeFilters);
                    }}
                />
                <div>
                    {products.map((item) => {
                        if (activeFilters.SIZE) {
                            for (const size of activeFilters.SIZE) {
                                if (!item.tags.SIZE.includes(size)) {
                                    console.log("Found it", size);
                                    return null;
                                }
                            }
                        }
                        if (activeFilters.STYLE) {
                            for (const size of activeFilters.STYLE) {
                                if (!item.tags.STYLE.includes(size)) {
                                    console.log("Found it", size);
                                    return null;
                                }
                            }
                        }
                        if (activeFilters.COLOR) {
                            for (const size of activeFilters.COLOR) {
                                if (!item.tags.COLOR.includes(size)) {
                                    console.log("Found it", size);
                                    return null;
                                }
                            }
                        }

                        return (
                            <div key={item.id} className={"flex flex-row"}>
                                {item.label}
                                <div>{JSON.stringify(item.tags)}</div>
                            </div>
                        );
                    })}
                </div>
            </div>
        </>
    );
};

export default Home;
