import { type NextPage } from "next";
import Head from "next/head";
import Image from "next/image";

import Sidebar, { type Category } from "~/components/layout/sidebar";
import productsData from "../data/products.json";
import Link from "next/link";
import { useEffect, useState } from "react";
type DataType = typeof productsData;

const Home: NextPage = () => {
  const [activeFilters, setActiveFilters] = useState<{
    [key in Category as string]: string[];
  }>({ COLOR: [], STYLE: [], SIZE: [] });
  const [products, setProducts] = useState<DataType>([]);

  const shuffle = <T extends DataType>(t: T) => Array.from(sample(t, t.length));

  function* sample<T extends DataType>(t: T, n: number) {
    const r = Array.from(t);
    while (n > 0 && r.length) {
      const i = rand(r.length); // 1
      swap(r, i, r.length - 1); // 2
      const popped = r.pop(); // 3
      if (popped !== undefined) {
        yield popped;
        n = n - 1;
      }
    }
  }

  const rand = (n: number) => 0 | (Math.random() * n);

  function swap<T extends DataType>(t: T, i: number, j: number) {
    const q = t[i]!;
    t[i] = t[j]!;
    t[j] = q!;
    return t;
  }

  useEffect(() => {
    console.log("Runnign");
    const data = shuffle(productsData);
    setProducts(data);
  }, []);

  return (
    <>
      <Head>
        <title>Create T3 App</title>
        <meta name="description" content="Generated by create-t3-app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <div className="flex h-full w-full flex-row">
        <Sidebar
          activeFilters={activeFilters}
          setActiveFilters={(data) => {
            const { tag } = data;
            const category = data.category.toString();
            const temp = activeFilters;

            if (!temp[category] || !temp[category]?.includes(tag.id)) {
              if (!temp[category]) {
                temp[category] = [tag.id];
              } else {
                temp[category]?.push(tag.id);
              }
              console.log("Not Found adding", temp[category]);
            } else if (temp[category] != undefined && temp[category] != null) {
              temp[category]!.splice(temp[category]!.indexOf(tag.id), 1);
              console.log("Found deleting", temp);
            }

            // setActiveFilters((currFilters) => ({
            //     ...currFilters,
            //     [category]: [],
            // }));
            // const temp = [...activeFilters];
            // if (!temp. {
            //     temp.push(tag.id);
            // } else {
            //     temp.splice(temp.indexOf(tag.id), 1);
            //     console.log("Found deleting", temp);
            // }
            setActiveFilters(() => ({
              ...temp,
            }));
            console.log("ActiveFilters", activeFilters);
          }}
        />
        <div className="grid w-full grid-cols-4 gap-2">
          {products.map((item) => {
            if (activeFilters.SIZE && activeFilters.SIZE.length > 0) {
              const filteredData = activeFilters.SIZE.filter((val) => {
                if (item.tags.SIZE.includes(val)) {
                  return val;
                }
              });
              if (filteredData.length < 1) {
                return null;
              }
            }
            if (activeFilters.STYLE && activeFilters.STYLE.length > 0) {
              const filteredData = activeFilters.STYLE.filter((val) => {
                if (item.tags.STYLE.includes(val)) {
                  return val;
                }
              });
              if (filteredData.length < 1) {
                return null;
              }
            }
            if (activeFilters.COLOR && activeFilters.COLOR.length > 0) {
              const filteredData = activeFilters.COLOR.filter((val) => {
                if (item.tags.COLOR.includes(val)) {
                  return val;
                }
              });
              if (filteredData.length < 1) {
                return null;
              }
            }

            return (
              <div key={item.id} className="flex flex-col px-2 py-4">
                <Link href={`/${item.id}`} passHref>
                  <button
                    className={
                      "flex flex-col rounded p-1 outline-1 outline-black-100/50 hover:outline"
                    }
                  >
                    <Image
                      alt={item.label}
                      src={item.image || ""}
                      width={600}
                      height={600}
                      className="h-64 w-64"
                    />
                    <div className="flex h-full w-full flex-col items-center justify-center ">
                      <span className="text-lg font-medium">{item.label}</span>
                      <span className="font-extralight">${item.price}</span>
                    </div>
                  </button>
                </Link>
              </div>
            );
          })}
        </div>
      </div>
    </>
  );
};

export default Home;
